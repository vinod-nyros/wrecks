
- model: sqls.sql

  pk: 1

  fields:

    description: >
      Choices insert

    sql: |
      INSERT INTO  choices (name, current, id, cost, sortorder, comment)
          VALUES ('Intel Core 2 Duo Mobile T8100 2.1GHz 3MB CPU', 'T', DEFAULT, 194, 1765, 'for GAMER laptop');

- model: sqls.sql

  pk: 2

  fields:

    description: >
      Show DESQ Processor options

    sql: |
      Select products.id, products.name, options.id, options.name, 
      choices.id, choices.name, choices.cost, choices.price, choices.sortorder
      where products.id = prodopts.productid AND prodopts.optionid = options.id
      AND choices.id = prodoptchoices.choiceid AND 
      prodoptchoices.productoptionid = prodopts.id AND products.id = 12819 AND
      options.id = 6564 ORDER BY choices.cost;

- model: sqls.sql

  pk: 3

  fields:

    description: >
      show all options/choices for a product

    sql: |
      Select products.id, products.name, options.id as optionsid, options.name, 
      prodoptchoices.productoptionid, prodopts.defaultchoiceid,
      choices.id, choices.name, choices.cost, choices.price, choices.sortorder
      where products.id = prodopts.productid AND prodopts.optionid = options.id
      AND choices.id = prodoptchoices.choiceid AND 
      prodoptchoices.productoptionid = prodopts.id AND 
      products.name LIKE '%/OPTDESKTOP' 
      ORDER BY options.id, choices.cost;

- model: sqls.sql

  pk: 4

  fields:

    description: >
      Delete from prodoptchoices old processors, etc. 

    sql: |
      DELETE FROM prodoptchoices 
      WHERE prodoptchoices.choiceid = 31466 AND (old choice id) prodoptchoices.productoptionid = 12988  (for only one product)
      RETURNING *;

- model: sqls.sql

  pk: 5

  fields:

    description: >
      Show everything that uses a certain choiceid

    sql: |
      SELECT  products.sku, prodopts.id, products.baseprice, options.name as option, choices.name as choice, choices.cost, prodoptchoices.pricedelta  
      from products, options, prodopts, choices, prodoptchoices 
      WHERE 
       (prodopts.productid = products.id) AND
       (prodopts.optionid = options.id)  AND  
       (prodoptchoices.productoptionid = prodopts.id)  AND
       (prodoptchoices.choiceid = choices.id) AND 
       (prodoptchoices.choiceid = '31466') 
      ORDER BY products.sku, options.name, prodopts.optionid, choices.name;

- model: sqls.sql

  pk: 6

  fields:

    description: >
      Show me every product that uses Adaptec% as a defaultchoice somewhere

    sql: |
      SELECT  products.sku, prodopts.id, products.baseprice, options.name as option, choices.name as choice, choices.cost, prodoptchoices.pricedelta  
      from products, options, prodopts, choices, prodoptchoices 
      WHERE 
       (prodopts.productid = products.id) AND
       (prodopts.optionid = options.id)  AND  
       (prodoptchoices.productoptionid = prodopts.id)  AND
       (prodoptchoices.choiceid = choices.id) AND 
       (choices.id = prodopts.defaultchoiceid) AND
       (choices.name LIKE 'Adaptec%') 
      ORDER BY products.sku, options.name, prodopts.optionid, choices.name;

- model: sqls.sql

  pk: 7

  fields:

    description: >
      Show me everything that has an LSI card somewhere

    sql: |
      SELECT  products.sku, prodopts.id, products.baseprice, 
      options.name as option, choices.id, choices.name as choice, choices.cost, 
      prodoptchoices.pricedelta, prodopts.defaultchoiceid  
      from products, options, prodopts, choices, prodoptchoices 
      WHERE 
       (prodopts.productid = products.id) AND
       (prodopts.optionid = options.id)  AND  
       (prodoptchoices.productoptionid = prodopts.id)  AND
       (prodoptchoices.choiceid = choices.id) AND 
       (choices.name like 'LSI%') 
      ORDER BY products.sku, options.name, prodopts.optionid, choices.name;

- model: sqls.sql

  pk: 8

  fields:

    description: >
      Update ProdOptChoices

    sql: |
      UPDATE prodoptchoices 
        SET choiceid = 35408
        WHERE prodoptchoices.choiceid = 37254;
      replaces old processor for a new one across models.

- model: sqls.sql

  pk: 9

  fields:

    description: >
      Replace 80GB SATA for SATA 2 in all bays of PREMIUM2

    sql: |
      Update prodoptchoices set choiceid = 32407
      where products.id = prodopts.productid AND prodopts.optionid = options.id
      AND choices.id = prodoptchoices.choiceid AND 
      prodoptchoices.productoptionid = prodopts.id AND 
      products.sku = 'PREMIUM2' AND
      options.name like 'Removable HD%' AND 
      choices.id = 27251;

- model: sqls.sql

  pk: 10

  fields:

    description: >
      Show default choices for each option for QUADPREM

    sql: |
      Select products.id, products.name, options.id, options.name, 
      prodoptchoices.productoptionid,
      choices.id, choices.name, choices.cost, choices.price, choices.sortorder
      where products.id = prodopts.productid AND prodopts.optionid = options.id
      AND choices.id = prodoptchoices.choiceid AND 
      prodoptchoices.productoptionid = prodopts.id AND 
      choices.id = prodopts.defaultchoiceid AND
      products.name LIKE '%/QUADPREM' 
       ORDER BY choices.name;

- model: sqls.sql

  pk: 11

  fields:

    description: >
      Print out baseprices, and total default costs for each sku, sort by category, then ascending total cost.

    sql: |
      
      Select  categories.name, products.sku, products.baseprice, sum(choices.cost) as total 
      where categories.id = products.categoryid AND
      products.id = prodopts.productid AND 
      products.current = 'T' AND
      prodopts.optionid = options.id
      AND choices.id = prodoptchoices.choiceid AND 
      prodoptchoices.productoptionid = prodopts.id AND 
      choices.id = prodopts.defaultchoiceid 
      group by categories.name, products.sku, products.baseprice
      order by categories.name, total;

- model: sqls.sql

  pk: 12

  fields:

    description: >
      Adding a comment field to a table! 

    sql: |
      Alter table optionchoices 
      add column comment varchar(80);

- model: sqls.sql

  pk: 13

  fields:

    description: >
      Show all choices for PCI-e across products

    sql: |
      Select products.id, products.name, options.id, options.name, 
      prodoptchoices.productoptionid,
      choices.id, choices.name, choices.cost, choices.price, choices.sortorder
      where products.id = prodopts.productid AND prodopts.optionid = options.id
      AND choices.id = prodoptchoices.choiceid AND 
      prodoptchoices.productoptionid = prodopts.id AND 
      options.id = 36525 ORDER BY choices.name;

- model: sqls.sql

  pk: 14

  fields:

    description: >
      Get the set of general SATA2 HD choices

    sql: |
      Select options.id, optionchoices.comment, options.name, choices.id, choices.name, choices.cost
      FROM options, choices, optionchoices 
      where optionchoices.optionid = options.id 
      AND optionchoices.choiceid = choices.id
      AND optionchoices.optionid = 32416
      ORDER BY choices.cost;

- model: sqls.sql

  pk: 15

  fields:

    description: >
      These are the prodopts that I went through to make sure all SATA2 defaultchoices ids are OK and all choices are complete.
      SATA -> SATA 2

    sql: |
      
      SELECT  prodopts.id, products.sku, prodopts.id, products.baseprice, options.name as option, choices.name as choice, choices.cost, prodoptchoices.pricedelta  
      from products, options, prodopts, choices, prodoptchoices 
      WHERE 
       (prodopts.productid = products.id) AND
       (prodopts.optionid = options.id)  AND 
       (prodoptchoices.productoptionid = prodopts.id)  AND
       (prodoptchoices.choiceid = choices.id) AND 
       (products.current = 'T') AND
       (prodoptchoices.choiceid = '27251') 
      ORDER BY products.sku, options.name, prodopts.optionid, choices.name;

- model: sqls.sql

  pk: 16

  fields:

    description: >
      Who is using 80GB as a defaultchoice? 

    sql: |
      SELECT  prodopts.id, products.sku, prodopts.id, products.baseprice, options.name as option, choices.name as choice, choices.cost, prodoptchoices.pricedelta  
      from products, options, prodopts, choices, prodoptchoices 
      WHERE 
       (prodopts.productid = products.id) AND
       (prodopts.optionid = options.id)  AND 
       (prodoptchoices.productoptionid = prodopts.id)  AND
       (prodoptchoices.choiceid = choices.id) AND 
       (products.current = 'T') AND
       (prodopts.defaultchoiceid = choices.id) AND
       (prodoptchoices.choiceid = '27251') 
      ORDER BY products.sku, options.name, prodopts.optionid, choices.name;

- model: sqls.sql

  pk: 17

  fields:

    description: >
      Test for nested query. (then add 1.5TB drives to everybody who has a 1TB drive in selection).

    sql: |
      -- my test (inserts into two old skus)
      INSERT into prodoptchoices ( pricedelta, productoptionid, choiceid, current)
      Select   0, productoptionid, 39338, 'T' 
      from prodoptchoices
      where (prodoptchoices.productoptionid = 4310 or 
      prodoptchoices.productoptionid = 30895) and 
      prodoptchoices.choiceid = 36230;

- model: sqls.sql

  pk: 18

  fields:

    description: >
      Add 1.5TB to every prodoptchoice set that has 1TB in it

    sql: |
      -- OK, assumes the nested query test works -
      INSERT into prodoptchoices ( pricedelta, productoptionid, choiceid, current)
      Select   0, prodoptchoices.productoptionid, 39338, 'T' 
      from prodoptchoices,products, prodopts,options, choices 
      where (
       prodopts.productid = products.id AND
       prodopts.optionid = options.id  AND 
       prodoptchoices.productoptionid = prodopts.id  AND
       prodoptchoices.choiceid = choices.id AND 
       products.current = 'T' AND
       prodoptchoices.choiceid = 36230)
       ORDER by prodoptchoices.productoptionid;

- model: sqls.sql

  pk: 19

  fields:

    description: >
      Copy all choices from productoptionid 40953 to a new productoptionid 40954 (that I already entered into prodopt table)

    sql: |
      INSERT into prodoptchoices ( pricedelta, productoptionid, choiceid, current)
      Select 0,40954, choiceid,'T' 
      from prodoptchoices
      where prodoptchoices.productoptionid = 40953;

- model: sqls.sql

  pk: 20

  fields:

    description: >
      Show me each Sku's Ubuntu* choices to make sure all 4 are included

    sql: |
      SELECT  products.sku, prodopts.id as prodoptid, choices.id as choiceid, prodopts.defaultchoiceid as default, products.baseprice, options.name as option, choices.name as choice, choices.cost, prodoptchoices.pricedelta  
      from products, options, prodopts, choices, prodoptchoices 
      WHERE 
       (prodopts.productid = products.id) AND
       (prodopts.optionid = options.id)  AND  
       (products.current = 'T') AND
       (prodoptchoices.productoptionid = prodopts.id)  AND
       (prodoptchoices.choiceid = choices.id) AND 
        (choices.name like 'Ubuntu Linux 8%') 
      ORDER BY products.sku, choices.name ;

- model: sqls.sql

  pk: 21

  fields:

    description: >
      Print out all the 5.25in Bay choices (except tape drives)

    sql: |
      SELECT  products.sku, prodopts.id, products.baseprice, 
      options.name as option, prodopts.id as prodoptid, choices.name as choice, choices.cost, prodoptchoices.pricedelta  
      from products, options, prodopts, choices, prodoptchoices 
      WHERE 
       (prodopts.productid = products.id) AND
       products.current = 'T' AND
       (prodopts.optionid = options.id)  AND  
       (prodoptchoices.productoptionid = prodopts.id)  AND
       (prodoptchoices.choiceid = choices.id) AND 
       (options.name like '5.25%') AND 
       (choices.name NOT like 'Tape Drive%')
      ORDER BY products.sku, options.name, prodopts.optionid, choices.cost;

